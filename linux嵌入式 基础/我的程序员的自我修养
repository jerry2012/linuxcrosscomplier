我的程序员的自我修养

第一 从IOS工程师开发出道

这里 不说IOS开发的相关 
而是谈一谈从IOS开发可以跨的领域

  首先 当然是 H5 JS 开发web 所要做的是熟悉HTML标签 与 javascript ES6 语法
经过几年的积累 边查文档 边写 简单页面 基本ok
  但是 由于技术的更新 H5的开发 基本傻瓜化 
  而主要依赖JS 而JS 也在逐渐完善 从前端浏览器的JS引擎 到后端跑Node 使用JS 也在
完善 因此 可以着重研究JS ES6 语法  
  而且 IOS 也在 OC 与JS 交互方面，有应用场景，再加上web与oc混合的应用也在不断出现，比如ReactNative，浅尝辄止了一段时间 总结之后  JS 语法一定要熟练 再加上OC的基础配合 事半功倍

  当然 学习 PHP 与 Python Java 了解 也是让自己更快提升的 让自己和前后台沟通 无障碍 ，还可以有机会实现自己的后台服务

第二 IOS开发 向Mac端 不说界面应用 ，单说命令行应用开发
	
	使用C C++ 融合 提高自己的开发功底
	怎么讲呢 应用场景 公司需要 操作redis数据库 与mysql数据库 ，决定使用c 来完成开发

	使用xcode 完成开发 建立mac下的commandlinetool 操作
	自己先编译hredis 客户端c的库  ，mysql 库，以及openssl库 ，cjson库
	到Mac 然后使用xcode 构建 ，代码主要使用c的知识 
	这里不具体讲解c

	而是说 我们从一个IOS硬件 走向 Mac硬件 这里一个项目工程构建中有什么关联吗

	首先 OC 与 C 本来就互通度高 从开发语言出发没什么太多，只要稍加用心熟练语法与常用API即可

	那么剩下来就是软件构建过程 从源代码开发 到 预处理器处理 宏定义 再到
	汇编器 将我们的源码汇编成 object文件 最后 使用 连接器 将我们 源代码生成的object文件 与 使用的其他第三方库 或 系统库的 object文件 连接
	形成我们看到的IOS应用程序 或者 commandlinetool 程序

	那么这期间主要的差别在哪呢？
	1、硬件层面 双方使用的硬件 cpu架构不一样 导致 汇编语言 汇编器 在形成object文件时 使用的汇编指令集 就不一样 

	32位CPu 寻址范围4G 所以最多支持4G内存

	ARM汇编分类：

	1. ARM标准汇编：使用ARM公司的汇编器，适合在windows平台下使用，

	2. GNU汇编：适合于GNU交叉编译工具链中的汇编器，适合Linux开发平台

	bootloader在最开始的时候，并没有构建运行C语言的环境，所以一开始都是用汇编代码写的，到后边等构建好了C代码环境，就可以使用C来写了

	xcode使用中我们发现我们会去指定architecture
	无论IOS开发 还是Mac 应用或命令行开发 都会去指定，我们不用指定因为是苹果自己的硬件 xcode 自己帮我们指定了

	2、软件代码方面 使用的系统库，第三方库 等 都会不一样 ，我们用xcode开发
	mac 或 ios 应用 使用的系统库 发生改变

第三 从Mac commandlinetool应用程序 走向 linux centos或者ubuntu 的commandlinetool 非界面应用的开发

	首先 为什么 之前到现在 都提到 我们做的都是非界面后台应用呢？ 因为第一 要是用c
	开发界面 真的 代码从mac 到 linux 跨起来 做的工作太多，本人只在mac下用opencv写过界面 没在linux写过 
	第二 真正项目中 没用过  要是跑界面 大家都用web去了 所以没太多使用了 
	所以我们写非界面后台应用c 开发 ，一是熟悉 而是方便与linux 系统 移植

	我们的项目应用场景
	mac 下 使用 xcode 开发 redis 与 mysql 数据同步的 命令行应用 
	使用开发语言 C

	mac 与 linux centos 桌面系统 非界面应用 能很好使用c 跨平台移植的原因
	很大程度 和上方都使用 x86 cpu架构 有关，至少cpu 汇编指令集这里都一样了


第四 公司项目需求（lora射频应用） 原先完成linux桌面应用 是因为我们需要一个后台服务
	而这个服务我们没有选择java 而原因多半是因为我们的合作公司 是一家硬件开发商
	便于双方业务沟通 选择使用双方可以减少沟通成本的c语言来完成一些服务

	我们使用c 完成Nserver Aserver 而这些都是机遇linux 桌面系统的

	随着业务的开展 ，硬件开发商 提供的 基站硬件  也需要开发维护

	这就 衍生出我们的第四点 走入嵌入式linux应用

	基本概念 罗列
	1、 基站有自己的cpu--arm 我们会注意到他使用的cpu 没有pc cpu那么强大，它的指令集 专业名词是 cpu精简指令集
	要在其上跑我们的程序 需要 针对该cpu 的toolchain 编译链文件 ，硬件开发商应该提供

	2、基站 设备 与我们 pc 设备 相同之处
	都有cpu 但是可能架构不一样，

	第二 设备上电第一个要启动的BIOS程序
	windows的BIOS 这里对应 有uboot bootloader

	第三 
	操作系统文件 或者 固件文件（外设USB驱动，网卡驱动，lora射频驱动），还有操作系统的文件系统 存储设备 对应 我们PC端的硬盘 但是嵌入式设备考虑到运行效率 它的存储使用的是
	flash闪存 即：NorFlash 与 NandFlash（NandFlash芯片 对应片内Nandfash控制器 NandFash GPIO引脚 ）

	第四 运行内存RAM
	设备上电 开始运行操作系统 运行我们的程序
	
	NorFlash 中的程序 一般直接 和 cpu 交互 不需要中间加载到内存 ，cpu直接读取代码运行
	而 NandFlash 需要 先 跑到运行内存 RAM（片内RAM与片外RAM）中 然后 与cpu交互

	第五 我们嵌入式linux平台 接外设
	比如我们的支持lora射频芯片接入 lora射频芯片模块 我就理解为单片机吧

	然后接到我们嵌入式linux主板上 ，那么又一个问题 写lora射频芯片模块的驱动

第五 从嵌入式linux系统 到 Soc 片上系统 开发板

	这里就有一个

	首先 我们如何选开发板

	我们要用开发板开发 就必然要和我们的PC或者Mac 连接
	那么开发板必须提供接口

	GPIO 通用外设输入输出引脚
	协议类接口 
	UART(片内UART控制器) pc 上有的com串口(我们使用UART转USB转换器);(数据传输 需要看UART协议)
	I2C总线(片内I2C控制器)-I2C芯片设备 --设备地址
	SPI插槽(片内SPI控制器)SPI芯片设备 --片选
	LCD接口 LCD排线 协议

	我们使用简单的UART串口

	开发板提供UART接口 是一个 用于串口通信调试
	我们常用UART口进行调试，但是UART的数据要传到电脑上分析就要匹配电脑的接口，通常我们电脑使用接口有COM口和USB口（最终在电脑上是一个虚拟的COM口），但是要想连上这两种接口都要需要进行硬件接口转换和电平转换。

	UART有4个pin（VCC, GND, RX, TX）, 用的TTL（TTL针脚）电平,  低电平为0(0V)，高电平为1（3.3V或以上）。

	COM口是我们台式机上面常用的口(下图)，9个pin， 用的RS232电平（RS232 针脚）,  它是负逻辑电平，它定义+5~+12V为低电平，而-12~-5V为高电平（PC 主机箱 接显示器的口）

	确保 1、开发板中有RS232接口，并且已连接到PC端
	确保 2、Uboot中已经实现Ymodem协议的loady命令（一般默认 都会提供）
	使用
	在uboot中，输入loady
	在PC端使用串口程序去传送文件

	好一点的 会提供Jtag接口 与 SWD 接口
	需要 jlink仿真器 连接到电脑

	再好一点 直接提供USB接口 双方通过USB 就可以实现文件传输
	Uboot中没有你的板子上的USB Host Controller的驱动的话，需要自己移植，
	这个工作量和难度，还是不小的
	两种工作模式 主从
	第一 开发板作为USB Host 主机
	把插在开发板上的U盘中的文件，拷贝Uboot的内存中
	确保1、开发板上有USB Host芯片和接口
	确保2、CPU支持 三星的S3C2440，其中包含了一个OHCI的USB Host主控制器。
	板子上也有USB Host接口
	确保3、Uboot中已经实现了USB Host Controller的驱动
          板子上也有USB Host接口。
	第二 开发板作为USB device 从设备
	将PC端的文件，通过USB线，传输到作为USB Device端的开发板上的Uboot的内存中
	
	确保 1、板子上有对应的USB Device功能的controller和对应的USB Device接口
	确保 2、PC端已经安装了对应的USB相关驱动
	确保 3、PC端需要有对应的DNW软件
    确保 4、Uboot中实现了对应的命令

	上面 我们可以有很多接口选择 实现与我们的PC端 与开发版 连接调试

	但是我们需要明白一点 一般上面的开发板接口可以使用 都是因为

	开发板已经不是裸机  ，他已经烧写了 uboot 也就是bootloader 也就是我们说的

	等同于PC的 BIOS，那么同时 一些接口可以使用 在烧写uboot的时候 也烧写了一些默认支持的通信接口的驱动


第六 
	必须掌握技能



我们的 USB转串口设备  芯片供应商silicon labs 网站
https://www.silabs.com/products/development-tools/interface/cp2102ek-evaluation-kit

寻找 在Mac上 为这款设备 找寻驱动

但是 发现我们的mac 早已更新java环境 为8

该驱动程序需要java6 

https://support.apple.com/kb/DL1572?viewlocale=zh_CN&locale=en_US

检查mac 原先 java版本

/usr/bin/java
macserver:~ admindyn$ java -version
java version "1.8.0_111"
Java(TM) SE Runtime Environment (build 1.8.0_111-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)
macserver:~ admindyn$ 

安装后 我们并没有设置 java6 的环境变量 

点击我们下载的驱动器 安装 竟然可以安装了
‪

Product Name:     CP210x Software Development Kit
Install Folder:     "MCU" in the folder "SiliconLabs" on the disk "Macintosh HD"
Alias Folder:     "Desktop" in the folder "admindyn" on the disk "Macintosh HD"
Disk Space Information (for Installation Target):      Required: 318,639,172 Bytes

看来 安装程序 自动寻找到了 系统下的java6 目录

我们在Mac的 苹果标  关于  系统报告 下
找到所有Mac 接的外设设备 设备安装驱动情况
发现 我们当前的USB-UART转换设别驱动已经安装

Mac 命令行 使用screen
我们的mac 已经安装该命令  没有的用户 可以 使用 brew 安装该命令

macserver:~ admindyn$ screen -ls
There is a screen on:
	5821.ttys000.macserver	(Detached)
1 Socket in /var/folders/4l/txqq5wz92psbpzvj4wq9tnnm0000gq/T/.screen.

macserver:~ admindyn$ screen -r 5821
[screen is terminating]
macserver:~ admindyn$ screen -ls
No Sockets found in /var/folders/4l/txqq5wz92psbpzvj4wq9tnnm0000gq/T/.screen.

macserver:~ admindyn$ 

退出screen子进程 使用ctrl+d 快捷键退出 

未完待续











